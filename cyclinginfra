rm(list = ls())

if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("qgisprocess")) install.packages("qgisprocess")
install.packages("qgisprocess", dependencies = TRUE)

##################################
#Attribute values:
##################################

#RouteStatus: 1 (idea/concept) - 2 (potential route) - 3 (in use)
#RouteSurface: 0 (NA) - 1 (unpaved/mountain biking) - 2 (unpaved/muddy when rain) - 3 (all-weather)
#NCNRoute: 1 (not part) - 2 (route part of the National NCN) - 3 (route part of the Regional)
# JIBE
#4 = off road path;
#3 = protected lane/ segregated lanes;
#2 = painted lanes;
#1 = Integrated lanes
#0 = Cycling link but have to walk (Tfgm 9)
#TfGM
# 2 = on-road Advisory Routes*. Routes along roads with directions signs as minimum level of infrastructure. a.k.a. recommended signed routes
# 3 = on-road routes with cycling facilities, e.g. cycle lanes and / or advanced stop lines at signals
# 4 = segregated cycle lanes / Shared Use Footways adjacent to the carriageway
# 5 = traffic-free routes, e.g. converted railway line
# 6 = canal towpaths - cycling permitted
# 7 = canal towpaths – cycling permitted with permit
# 9 = footpaths - cycling prohibited (e.g. footbridges across motorways). Use of these can however prevent long detours
#11 = on-road route – with physical segregation e.g. armadillos

# *Advisory cycle lanes are marked with a broken white line to TSRGD diagram 1004 and should not be entered by other vehicles unless it
#is unavoidable.(DfT, 2020, pp.61-62)

#####################
#PART 1: synchronize TfGM cycling infrastructure to JIBE categories
#####################
# JIBE                                            #TfGM
#4 = off road path;                               5; 6; 7
#3 = protected lane/ segregated lanes;            4; 11
#2 = painted lanes;                               3
#1 = Integrated lanes                             2
#0 = Cycling link but have to walk (Tfgm 9)       9

#read-in networks data
osm <- st_read(file.path("01_DataInput/Network/GreaterManchester/network-addedinfo.geojson"))
cycle <-  st_read(file.path("D:/JIBE/01_DataInput/Network/GM_cycle/2018/SHP-format/2018/Cycle_Routes_polyline.shp"))

#keep only existing infra -3; from 3306 total of 75 removed - 1 (idea/concept) - 2 (potential route) --3231 final
cycle <- cycle[cycle$RouteStatu == 3, ]

#sync categories
cycle$RouteType <- gsub(9, 0, cycle$RouteType)
cycle$RouteType <- gsub(2, 1, cycle$RouteType)
cycle$RouteType <- gsub(3, 2, cycle$RouteType)
cycle$RouteType <- gsub(4, 3, cycle$RouteType)
cycle$RouteType <- gsub(11, 3, cycle$RouteType)
cycle$RouteType <- gsub(5, 4, cycle$RouteType)
cycle$RouteType <- gsub(6, 4, cycle$RouteType)
cycle$RouteType <- gsub(7, 4, cycle$RouteType)

#####################
#PART 2: Create sample points on lines
#####################
#Density 1/30 meaning one in 30 m interval, 'n' argument is redundant; overwrites 'density' argument (n = indicate at least one point even if the line is less than 20m)
cycle <- cycle %>% st_cast("LINESTRING")
cycle_points <- st_line_sample (cycle, density = 1/30, type = "regular", sample = NULL)
cycle_points <- st_sf(as.data.frame(cycle), cycle_points) %>% st_cast("POINT") #add attributes of the lines to points; issues with multi-point, so cast to point

#st_write(cycle_points, file.path(paste0("02_DataOutput/network/gm/edges")), "cycle_points30m.shp", driver="ESRI Shapefile") #write for visual inspection in QGIS
#muddy routes are included-- consider excluding?

#####################
#PART 2: linking networks info
#####################

#snap cycling points to OSM edges
snap <- qgis_run_algorithm(
  "native:snapgeometries",
  BEHAVIOR = 1, #prefer closest points insert extra vertices where needed
  INPUT = cycle_points,
  REFERENCE_LAYER = osm,
  TOLERANCE = 50
)

snap_sf <- st_read("C:/Users/nene_/AppData/Local/Temp/RtmpeOygAE/file35c469826fc4/file35c4393779a2.gpkg")
snapbuffer <- st_buffer(snap_sf, dist = 0.05)

#add cycling info to edges
joininfo <- qgis_run_algorithm(
  "qgis:joinbylocationsummary",
  DISCARD_NONMATCHING = F,
  INPUT = osm,
  JOIN = snapbuffer,
  SUMMARIES = 10, # 10 is for majority, 7 for mean
  JOIN_FIELDS = c('ID', 'RouteType', 'RouteStatus', 'RouteSurface')
)
